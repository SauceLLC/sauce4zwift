@use 'color';
@use 'sass:math';

$shadow-size: 0.4rem;
$html-pad: 3px;
$content-pad: 0.4rem;
// Use same units for these...
$desc-font-size: 0.86em;
$shrink-horiz-gap: 3.5em;
$hide-horiz-gap: 1.5em;
// end units lock

html {
    --max-positions: 6;
    --aspect-ratio: calc(2.25 / (var(--max-positions) - 1));
    --main-animation-duration: 2000ms;
    --main-animation-function: ease-in-out;
    --vis-animation-duration: 500ms;
    --vis-animation-function: ease;

    &.reduce-overhead {
        --main-animation-duration: 1000ms;
        --main-animation-function: steps(24);
        --vis-animation-duration: 500ms;
        --vis-animation-function: steps(12);
    }

    &.solid-background {
        background: var(--background-color);

        body {
            background: transparent;
        }
    }

    &.horizontal {
        --label-angle: 50;
        font-size: clamp(2.2mm, 8vh, var(--aspect-ratio) * 8vw);

        &.horizontal-ltr {
            #container {
                flex-direction: row;
            }
        }

        &:not(.horizontal-ltr) {
            #container {
                flex-direction: row-reverse;
            }
        }

        #container {
            padding-left: calc((90 - var(--label-angle)) / 90 * 5em);
        }
    }

    &.settings-mode #meta.app-drag {
        app-region: initial !important;
    }

    &.hide-header #meta {
        display: none;
    }

    &:not(.game-connection) ms[data-action="watch"] {
        display: none;
    }
}

#meta {
    position: relative;
    margin-top: $content-pad;
    padding: 0.30em 1em 0.4em;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: 0.86em;
    font-weight: bold;
    font-variant-caps: all-small-caps;
    font-variant-numeric: tabular-nums;
    background: #111c;
    color: #fff;
    border-radius: 1em;
    margin-right: $content-pad;
    margin-left: $content-pad;
    align-self: center;

    &:empty::after {
        font-size: 0.8em;
        content: 'Waiting for data';
    }

    .line {
        line-height: 1;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
        min-width: 10ex;
        text-align: center;
    }

    abbr.unit {
        font-size: 0.72em;
        margin-left: 0.08em;
    }
}
html.horizontal #meta {
    flex-direction: row;
}

#ahead,
#behind {
    padding: 0.30em 0.5em 0.55em;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-size: 0.86em;
    font-weight: bold;
    font-variant-caps: all-small-caps;
    font-variant-numeric: tabular-nums;
    line-height: 1;
    transition-property: opacity, max-height, padding, visibility;
    transition-duration: var(--vis-animation-duration);
    transition-timing-function: var(--vis-animation-function);
    max-height: 2.5em;

    &:not(.visible) {
        max-height: 0;
        padding: 0;
        opacity: 0;
        visibility: hidden;
    }
}
#ahead {
    order: -100000000;
}
#behind {
    order: 100000000;
}

#container {
    display: flex;
    flex: 1 1 100%;
    flex-direction: column;
    position: relative;
    padding: $content-pad;
    align-items: center;
    justify-content: center;
}

@keyframes attn-rim-pulse {
    from {
        box-shadow: 0 0 0 $shadow-size var(--rim-color-from), 0.03rem 0.03rem $shadow-size 0 var(--rim-border-color);
    }

    50% {
        box-shadow: 0 0 0 $shadow-size var(--rim-color-to), 0.03rem 0.03rem $shadow-size 0 var(--rim-border-color);
    }

    to {
        box-shadow: 0 0 0 $shadow-size var(--rim-color-from), 0.03rem 0.03rem $shadow-size 0 var(--rim-border-color);
    }
}

@keyframes attn-line-snap {
    from {
        transform: scale3d(1, 1, 1);
    }

    to {
        transform: scale3d(0.98, 0.90, 0.98);
    }
}


.desc .lines {
    display: flex;
    flex-direction: column;
    overflow: hidden;

    .line {
        overflow: hidden;
        text-overflow: ellipsis;
        font-variant-numeric: tabular-nums;
        font-weight: 500;
        letter-spacing: -0.04em;
        white-space: nowrap;
        max-width: 100%;
        // XXX Try using stroke instead of text-shadow
        padding: 0 1.5px; // for text-shadow and subpixel rendering.
        text-shadow:
            0 0 1px color.shade(fg, 100%),
            0 0 1px color.shade(fg, 100%),
            0 0 1px color.shade(fg, 100%),
            0 0 1px color.shade(fg, 100%),
            0 0 1px color.shade(fg, 100%),
            0 0 1px color.shade(fg, 100%),
            0 0 1px color.shade(fg, 100%),
            0 0 1px color.shade(fg, 100%);

        &.attn {
            margin-bottom: 0;
            color: var(--attn-line-color);
            font-size: 0.8em;
            font-weight: 500;

            &.major {
                line-height: 1.3;
                font-size: 1em;
                animation: attn-line-snap 400ms infinite steps(10);
                animation-timing-function: ease-out;
            }
        }

        &.minor {
            font-size: 0.80em;
            font-weight: 400;
            opacity: 0.88;
            line-height: 1;
        }

        &.est {
            font-size: min(0.65em, 0.9rem) !important;
            font-style: italic;
        }

        abbr.unit {
            margin-left: 0.28em;
            opacity: 0.88;
            font-size: 0.7em;
        }
    }

    .badge {
        margin-top: 0.2em;
        margin-right: 0.1em;
        font-size: 0.56em;
        max-width: 100%;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
}

.position {
    --rim-color: #666a;
    --rim-color: #6668;
    --rim-border-color: #0004;
    --subgroup-A-color: hsl(6deg 70% 50%);
    --subgroup-B-color: hsl(110deg 70% 50%);
    --subgroup-C-color: hsl(180deg 80% 50%);
    --subgroup-D-color: hsl(60deg 80% 50%);
    --subgroup-E-color: hsl(270deg 80% 50%);
    --size: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    flex: 0 0 auto;
    position: relative;
    transition-property: opacity, visibility;
    transition-duration: var(--vis-animation-duration);
    transition-timing-function: var(--vis-animation-function);

    &.hidden {
        opacity: 0 !important;
        visibility: hidden !important;

        .bubble {
            width: 0 !important;
            height: 0 !important;
            margin: 0 !important;
        }
    }

    .left.desc .actions {
        transition: opacity 150ms, visibility 150ms, margin 150ms, max-width 200ms;
        opacity: 0;
        visibility: hidden;
        margin: 0;
        font-size: 1.2em;
        max-width: 0;
        display: flex;

        ms[data-action] {
            font-weight: 600;
            opacity: 0.8;
            transition: opacity 150ms;
            cursor: pointer;
            margin: 0 0.1em 0 0.1em;
            text-shadow:
                0 0 1px color.shade(fg, 100%),
                0 0 1px color.shade(fg, 100%),
                0 0 1px color.shade(fg, 100%),
                0 0 1px color.shade(fg, 100%);

            &.hidden {
                display: none;
            }
        }
    }

    &:hover {
        .left.desc .actions {
            opacity: 1;
            visibility: visible;
            max-width: 2em;

            ms[data-action] {
                opacity: 0.7;

                &:hover {
                    opacity: 1;
                }
            }
        }
    }

    &.watching {
        --bubble-size: 0.22rem;

        .bubble {
            background: radial-gradient(#0af, #09ea, #333a);
            color: white;
        }

        &.pack-position .bubble::before {
            transition: top 200ms linear;
            top: calc(var(--pack-position) * (100% - var(--bubble-size)));
            content: "";
            position: absolute;
            width: 100%;
            height: var(--bubble-size);
            background-color: #444;
            mix-blend-mode: overlay;
        }
    }

    &.attn {
        --rim-color-from: #ff35008f;
        --rim-color-to: #800a;
        --attn-line-color: #fb0;

        .bubble {
            animation: attn-rim-pulse 400ms infinite steps(10);
        }
    }

    .bubble {
        position: relative;
        width: calc(var(--size) * 1rem);
        height: calc(var(--size) * 1rem);
        transition-property: color, font, margin, width, height;
        transition-duration: var(--vis-animation-duration);
        transition-timing-function: var(--vis-animation-function);
        display: flex;
        overflow: hidden;
        cursor: pointer;
        align-items: center;
        justify-content: center;
        text-align: center;
        white-space: pre-wrap;
        border-radius: 50%;
        background: radial-gradient(#fffd, #fffd, #fffb);
        font-size: calc(0.4em + (var(--size) * 0.2rem));
        color: #000;
        text-decoration: none;

        &:not(:empty) {
            margin: $shadow-size;
            box-shadow: 0 0 0 $shadow-size var(--rim-color), 0.03rem 0.03rem $shadow-size 0 var(--rim-border-color);
        }

        img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    }

    .bubble-holder {
        position: relative;
        --subgroup-A: 0;
        --subgroup-B: 0;
        --subgroup-C: 0;
        --subgroup-D: 0;
        --subgroup-E: 0;

        &.subgroup-wheel {
            .rings {
                content: '';
                position: absolute;
                z-index: 10;
                pointer-events: none;
                width: 100%;
                height: 100%;
                border-radius: 50%;
                top: 0;
                left: 0;
                --a: calc(var(--subgroup-A) * 100%);
                --b: calc(var(--a) + var(--subgroup-B) * 100%);
                --c: calc(var(--b) + var(--subgroup-C) * 100%);
                --d: calc(var(--c) + var(--subgroup-D) * 100%);
                --e: calc(var(--d) + var(--subgroup-E) * 100%);
                /* Pie slices... */
                background-image: conic-gradient(
                    var(--subgroup-A-color), var(--subgroup-A-color) var(--a),
                    var(--subgroup-B-color) var(--a), var(--subgroup-B-color) var(--b),
                    var(--subgroup-C-color) var(--b), var(--subgroup-C-color) var(--c),
                    var(--subgroup-D-color) var(--c), var(--subgroup-D-color) var(--d),
                    var(--subgroup-E-color) var(--d), var(--subgroup-E-color));
                /* Blended... */
                /*background-image: conic-gradient(
                    var(--subgroup-A-color), var(--subgroup-A-color) var(--a),
                    var(--subgroup-B-color) var(--b),
                    var(--subgroup-C-color) var(--c),
                    var(--subgroup-D-color) var(--d),
                    var(--subgroup-E-color));*/
                $mask-gradient: radial-gradient(closest-side,
                    #0000,
                    #0000 calc(100% - 0.2rem),
                    #000 calc(100% - 0.1rem),
                    #000 calc(100% - 0.05rem),
                    #0000 calc(100% - 0.01rem),
                    #0000);
                -webkit-mask-image: $mask-gradient;
                mask-image: $mask-gradient;
                mix-blend-mode: hard-light;
            }
        }
    }
}

html.horizontal {
    .position.watching.pack-position .bubble::before {
        height: 100%;
        width: var(--bubble-size);
        top: unset;
    }

    &:not(.horizontal-ltr) {
        .position.watching.pack-position .bubble::before {
            right: calc(var(--pack-position) * (100% - var(--bubble-size)));
        }
    }
    &.horizontal-ltr {
        .position.watching.pack-position .bubble::before {
            left: calc(var(--pack-position) * (100% - var(--bubble-size)));
        }
    }
}

html:not(.horizontal) .position {
    width: 100%;
}

.zoom-out {
    display: none;
    position: absolute;
    z-index: 100;
    height: 1em;
    cursor: pointer;
    opacity: 0.8;
    transition: opacity 200ms;
    right: 1em;

    &:hover {
        opacity: 1;
    }

    img {
        height: 1.5em;
        filter: invert(1);
    }
}
html:not(.horizontal) .zoom-out {
    bottom: 3em;
}
html.horizontal .zoom-out {
    bottom: 1.5em;
}

#content:not(.zoomed) {
    --flex-factor: 180;  // 180s spread required to fill height
}

#content.zoomed {
    --flex-factor: 6;  // 6s spread required to fill height

    &:hover {
        .zoom-out {
            display: block;

            &:hover {
                opacity: 1;
            }
        }
    }

    .position.watching {
        --rim-color: #09ea;
        --rim-border-color: #fff4;

        .bubble {
            background: radial-gradient(#025, #027);

            &::before {
                content: none !important; // Disable pack position indicator
            }
        }
    }
}

#content:not(.zoomed) .position .bubble {
    &::after {
        transition: opacity 200ms;
        opacity: 0;
        content: '';
        position: absolute;
        pointer-events: none;
    }

    &:hover {
        color: transparent;

        &::after {
            opacity: 1;
            position: absolute;
            background-image: url(../images/fa/search-plus-duotone.svg);
            width: 100%;
            height: 100%;
            background-size: auto min(1rem, 50%);
            background-position: center center;
            background-repeat: no-repeat;
        }
    }
}

.desc {
    display: flex;
    align-items: center;
    position: absolute;
    z-index: 1;
    font-size: $desc-font-size;
}

html {
    .position .desc {
        transition-property: left, width;
        transition-duration: 1s;
        transition-timing-function: ease-in-out;

        &::after {
            padding: 0 0.2em;
        }
    }
    &:not(.horizontal) .position .desc {
        &.left {
            left: 0;
            width: calc(50% - (var(--size) * 0.5rem) - $shadow-size);
            justify-content: flex-end;

            .lines {
                align-items: flex-end;
            }
        }
        &.right {
            $pad: 0.12rem;
            left: calc(50% + (var(--size) * 0.5rem) + $shadow-size + $pad);
            width: calc(50% - (var(--size) * 0.5rem) + $content-pad - $shadow-size - $pad);

            .lines {
                align-items: flex-start;
            }
        }
    }
    &.horizontal {
        .position .desc {
            max-width: 40vh;
        }

        &:not(.horizontal-ltr) {
            .position .desc.left {
                right: 75%;
                bottom: 95%;
                transform: rotate(calc(var(--label-angle) * 1deg)) translateY(50%);
                transform-origin: right bottom;

                .lines {
                    align-items: flex-end;
                    flex-direction: column-reverse;

                    .badge {
                        margin-top: 0;
                        margin-bottom: 0.2em;
                    }
                }
            }
            .position .desc.right {
                right: 75%;
                top: 95%;
                transform: rotate(calc(var(--label-angle) * -1deg)) translateY(-50%);
                transform-origin: right top;

                .lines {
                    align-items: flex-end;
                }
            }
        }

        &.horizontal-ltr {
            .position .desc.left {
                left: 75%;
                bottom: 95%;
                transform: rotate(calc(var(--label-angle) * -1deg)) translateY(50%);
                transform-origin: left bottom;

                .lines {
                    align-items: flex-end;
                    flex-direction: column-reverse;

                    .badge {
                        margin-top: 0;
                        margin-bottom: 0.2em;
                    }
                }
            }
            .position .desc.right {
                left: 75%;
                top: 95%;
                transform: rotate(calc(var(--label-angle) * 1deg)) translateY(-50%);
                transform-origin: left top;

                .lines {
                    align-items: flex-end;
                }
            }
        }
    }
}

html:not(.horizontal) {
    .position .desc.right:not(.empty)::before,
    .position .desc.left:not(.empty)::after,
    .gap .desc:not(.empty)::after {
        content: '⋯';
    }
}
html.horizontal {
    &:not(.horizontal-ltr) {
        .position .desc.right:not(.empty)::after,
        .position .desc.left:not(.empty)::after {
            content: '⋯';
        }
    }

    &.horizontal-ltr {
        .position .desc.right:not(.empty)::before,
        .position .desc.left:not(.empty)::before {
            content: '⋯';
        }
    }
}

.desc::before,
.desc::after {
    font-size: 0.5rem;
    color: #aaa9;
}

html {
    $border-width: calc(0.08rem + 0.15rem * min(1, var(--outer-gap) / 600));

    .gap {
        position: relative;
        flex: calc(var(--inner-gap) / var(--flex-factor)) 1 0;
        transition-property: flex, opacity, visibility;
        transition-duration: var(--main-animation-duration), var(--vis-animation-duration), var(--vis-animation-duration);
        transition-timing-function: var(--main-animation-function), var(--vis-animation-function), var(--vis-animation-function);

        &.hidden {
            flex-grow: 0;
            opacity: 0;
            visibility: hidden;
        }


        .desc {
            &::after {
                padding: 0 0.5rem 0 0.3em;
            }
        }
    }
    &:not(.horizontal) .gap {
        border-right-style: solid;
        border-right-width: $border-width;
        border-right-color: hsl(calc(70deg + 50deg * min(var(--outer-gap) / 300, 1) * var(--gap-sign)) 100% 50%);

        .desc {
            $pad: 0.1rem;
            top: 0;
            height: 100%;
            right: $pad;
            width: calc(50vw - ($html-pad * 2) - $pad - $border-width - ($content-pad / 2) + $content-pad);
            justify-content: flex-end;

            .lines {
                align-items: flex-end;

                .line {
                    text-align: right;
                }
            }
        }
    }
    &.horizontal {
        &:not(.horizontal-ltr) {
            #content:not(.zoomed) .gap {
                .desc {
                    bottom: 0.6em;
                    right: calc(50% - 0.5em);
                    transform: rotate(calc(var(--label-angle) * 1deg)) translateY(50%);
                    transform-origin: right bottom;

                    &:not(.empty)::after {
                        content: '⋯';
                    }

                    .lines {
                        flex-direction: column-reverse;
                    }
                }
            }
        }

        &.horizontal-ltr {
            #content:not(.zoomed) .gap {
                .desc {
                    bottom: 0.6em;
                    left: 50%;
                    transform: rotate(calc(var(--label-angle) * -1deg)) translateY(50%);
                    transform-origin: left bottom;

                    &:not(.empty)::before {
                        content: '⋯';
                    }

                    .lines {
                        flex-direction: column;
                    }
                }
            }
        }

        .gap {
            border-top-style: solid;
            border-top-width: $border-width;
            border-top-color: hsl(calc(70deg + 50deg * min(var(--outer-gap) / 300, 1) * var(--gap-sign)) 100% 50%);

            .desc {
                transition: opacity 300ms, font-size 300ms;

                .lines {
                    align-items: center;

                    .line {
                        text-overflow: clip;
                    }
                }
            }
        }

        #content.zoomed .gap {
            container: horiz-gap / inline-size;

            .desc {
                bottom: 0;
                right: 50%;
                overflow: hidden;
                max-width: 100%;
                transform: translateX(50%);
                flex-direction: column;
            }
        }
        #content:not(.zoomed) .gap {
            container: horiz-group-gap / inline-size;
        }
    }
}

@container horiz-gap (max-width: #{$shrink-horiz-gap}) {
    .desc {
        $base: 0.2em;
        $min: math.div($base, $shrink-horiz-gap) * 100cqi;
        $dynamic: math.div($desc-font-size - $base, $shrink-horiz-gap) * 100cqi;
        font-size: calc($base + $dynamic);
    }
}

@container horiz-gap (max-width: #{$hide-horiz-gap}) {
    .desc {
        opacity: 0;
    }
}

@container horiz-group-gap (max-width: 1em) {
    .desc {
        opacity: 0;
    }
}
